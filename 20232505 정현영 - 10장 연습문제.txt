10장 연습문제
20232505 정현영

1. JDBC 드라이버의 유형과 특징을 설명하시오.
JDBC-ODBC 브릿지 드라이버 - 데이터베이스에 연결하기 위해 JDBC-ODBC 브릿지 드라이버는 단지 자바 소프트에서 제공하고 있는 ODBC를 호출하는 역할만 수행한다. 
Native-API 드라이버(Partial Java JDBC Driver) - JDBC에서 데이터베이스의 API를 직접 호출하는 방식으로, 자바코드와 일부의 C/C++의 API를 이용하는 드라이버이다. 
Net-Protocol 드라이버(Pure Java JDBC Driver With middleware) - JDBC와 데이터베이스 사이에 미들웨어를 설치하여 처리하는 방식으로 JDBC 호출을 데이터베이스에 독립적인 프로토콜을 이용하여 해당 데이터베이스와 통신하는 드라이버로 순수 자바로 만들어진다.
Native-Protocol 드라이버(Pure Java JDBC Driver) - 순수 자바 기반의 드라이버  JDBC 호출을 데이터베이스에 직접 전달하는 방식이다. 

2. JDBC 프로그래밍 절차 6단계를 설명하시오.
1단계 : JDBC 드라이버 로드 - Class.forName()을 사용하여 JDBC 드라이버를 동적으로 로드하는 것으로, 지정한 드라이버 클래스가 객체화 될고 객체화와 동시에 자동적으로 DriverManager.registerDriver()를 호출하여 DriverManager에서 관리하는 드라이버 리스트에 등록이 이루어진다. DriverManager를 이용해서 데이터베이스에 연결을 할 수 있는 환경을 갖춘 것이다. 
2단계 : 데이터베이스 연결 - 이미 로드된 드라이버 클래스에게 지정한 데이터베이스로 연결을 요구하는 단계로 DriverManager.getConnection()을 호출한다. 
3단계 : SQL을 위한 Statement 객체 생성 - 이제 반환된 Connection 객체를 이용해서 SQL문을 실행하고 그 결과를 반환 받을 수 있는 Statement, PreparedStatemen, CallableStatement 객체를 생성하는 단계이다. 
4단계 : SQL 문장 실행 - 질의 문장을 실행하기 위해, 객체 Statement의 메소드 executeQuery(SQL)의 인자로 SQL문장을 넣어 호출한다.  DML의 한 종류인  select 문장은 질의 결과로 테이블의 형태의 결과를 반환한다. 메소드 executeQuery()도 select 문장과 같이 반환하는데, 이 반환 유형이 인터페이스 ResultSet이다. 
5단계 : 질의 결과 ResultSet 처리 - 객체 Statement의 메소드 executeQuery()를 호출하여 반환하고 ResultSet 객체를 사용하여 결과를 탐색하고 추출합니다. 반복문을 사용하여 모든 결과 행을 처리할 수 있습니다.
6단계 : JDBC 객체 연결 해제 - 이미 사용한 JDBC 객체의 연결을 해제하는 일이다. 

3. 다음은 JDBC 프로그래밍에 이용되는 기본 클래스와 인터페이스의 설명에 이용되는 메소드를 나타낸 표이다. 다음 표의ㅡ 빈 부분을 채우시오. 
패키지 - 인터페이스(클래스) - 클래스 용도 - 이용 메소드 
java.lang - 클래스 Class - 지정된 JDBC 드라이버를 실행시간동안 메모리에 로드 - forName();
java.sql - 클래스 DriverManger - 여러 JDBC 드라이버를 관리하는 클래스로 데이터베이스를 접속하여 연결 객체 반환 - getConnection();
java.sql - 인터페이스 Connection - 특정한 데이터베이스 연결 상태를 표현하는 클래스로 질의할 문장 객체 반환 - createStatement(); close();
java.sql - 인터페이스 Statement - 데이터베이스에 SQL 질의 문장을 질의하여 그 결과인 결과집합 객체를 반환 - executeQuery(); close()
java.sql - 인터페이스 ResultSet - 질의 결과의 자료를 저장하며 테이블 구조 - next(); getString(); getInt(); close();

4. JDBC는 SQL 문장을 처리하는 Statement, PreparedStatement, CallableStatement 3개의 인터페이스를 제공한다. 다음 표에서 각각은 무슨 인터페이스를 설명하고 있는가?
Statement - Connection 객체에서 createStatement() 메소드를 호출로 생성, 단순한 SQL 문장을 보낼 때 사용되며, 성능이나 효율성에서 가장 낮음
PreparedStatement - Connection 객체에서 prepareStatement() 메소드를 호출로 생성, 주로 PrepareStatement 클래스는 한번 사용되고 마는 SQL문이 아니라 여러 번 반복해서 사용되는 SQL을 다룰 때 편리, 컴파일할 때 에러를 체크라기 때문에 좀 더 효율적이며 처리하는 속도 역시 훨씬 빠름 
CallableStatement - Connection 객체에서 prepareCall 메소드의 호출로 생성, CallableStatement 객체는 저장 함수를 호출할 때 사용

5. 데이터베이스 univdb에 다음 테이블을 생성하고 JSP 프로그래밍을 작성하려고 한다. 다음 각각의 물음에 답하시오. 
(1) 다음 DDL로 테이블 department를 생성하시오. 
create table department (
	departid int NOT NULL auto_increment,
	name varchar(30) NOT NULL,
	numstudent int NULL,
	homepage varchar(30) NULL,
	PRIMARY KEY ( departid )
);

(2) 다음 SQL 문장을 참고로 테이블 department에 적당한 레코드를 5개 이상 삽입하시오.
inset into department (name, numstudent, homepage) values ('전산학과', 80, 'www.computer.ac.kr');
inset into department (name, numstudent, homepage) values ('인터넷비즈니스과', 120, 'www.ibiz.ac.kr');
inset into department (name, numstudent, homepage) values ('경영학과', 80, 'www.biz.ac.kr');
inset into department (name, numstudent, homepage) values ('기계과', 80, 'www.machine.ac.kr');
inset into department (name, numstudent, homepage) values ('국문과', 40, 'www.korean.ac.kr');

(3) 다음은 테이블 department에서 전체 레코드를 조회하여 출력하는 프로그램이다. 다음 브라우저의 결과를 참고로 소스의 빈 부분을 완성하시오. 
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>데이터베이스 예제 : 테이블 department 조회</title>
</head>
<body>

<%@ page import="java.sql.*, java.util.*" %>

<h2>테이블 department 조회 프로그램 </h2>
<hr><center>
<h2> 학과정보 조회</h2>

<%
	Connection con = null;
	Statement stmt = null;
	String driverName = "com.mysql.jdbc.Driver";
	String dbURL = "jdbc:mysql://localhost:3306/univdb";
	
	try {
		Class.forName(driverName);
		con = DriverManager.getConnection(dbURL, "root", "");
		stmt = con.createStatement();
		ResultSet result = stmt.executeQuery("select * from department;");
%>
	<table width=100% border=2 cellpadding=1>
	<tr>
		<td align=center><b>학과번호</b></td>
		<td align=center><b>학과이름</b></td>
		<td align=center><b>정원</b></td>
		<td align=center><b>홈페이지</b></td>
	</tr>
<%
		while ( result.next() ) {
%>
	<tr>
		<td align=center><%= result.getInt(1) %></td>
		<td align=center><%= result.getInt(2) %></td>
		<td align=center><%= result.getInt(3) %></td>
		<td align=center><%= result.getInt(4) %></td>
	</tr>
<%
		}
		result.close();
	}
	catch(Exception e) {
		out.println("MySql 데이터베이스 univdb의 department 조회에 문제가 있습니다. <hr> ");
		out,println(e.toString());
		e.printStackTrace();
	}
	finally {
		if(stmt != null) stmt.close();
		if(con != null) con.close();
	}
%>
</table>		
</center>

</body>
</html>

6. 다음은 ResultSetMetaData의 객체를 얻기 위해 테이블 student를 모두 조회하는 SQL문장으로 ResultSet 객체를 반환하여 저장하는 모듈이다. 또한 ResultSetMetaData의 객체를 이용하여 테이블 student의 칼럼 수를 변수 nCount에 저장하고자 한다. 다음 소스에서 빈 부분을 완성하시오. 
...
ResultSet result = stmt.executeQuery("select * from student;");
ResultSetMetaData rsmd = result.getMetaData();
int cCount = rsmd.getColumnCount();
...

7. 다음은 DBCP를 이용해 데이터베이스에 연결하는 모듈의 소스이다. 다음 소스의 빈 부분을 완성하시오. 
...
<%@ page import="java.sql.*, javax.sql.*, javax.naming.*" %>
...
Context initCtx = new InitialContext();
Context env = (Context) initCtx.lookup("java:comp/env/");
DataSource ds = (DataSource) env.lookup("jdbc/mysql");
con = ds.getConnection();
...